<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd" [

<!-- Begin Document Specific Declarations -->


<!-- End Document Specific Declarations -->

]>

<?Fm Condition DITA-Topicmeta Red NO_OVERRIDE show?>
<?Fm Condition DITA-Prolog AsIs NO_OVERRIDE show?>
<?Fm Condition DITA-Comment AsIs NO_OVERRIDE show?>
<?Fm Condition FM8_TRACK_CHANGES_ADDED Forest%20Green SINGLE_UNDERLINE hide?>
<?Fm Condition FM8_TRACK_CHANGES_DELETED Red STRIKETHROUGH hide?>
<?Fm Condition DITA-Data AsIs NO_OVERRIDE show?>
<?Fm Condition FM8_SYSTEM_HIDEELEMENT AsIs NO_OVERRIDE hide?>

<?Fm BoolCondExpr "DITA-Comment"OR"DITA-Data"OR"DITA-Prolog" State 0?>


<?Fm TrackChange Off PreviewState PREVIEW_OFF_TRACK_CHANGE?>
<topic id = "id1382B0F055Z"
    xmlns:ditaarch = "http://dita.oasis-open.org/architecture/2005/">
<title>Initial Conversion Table Setup</title>
<shortdesc>FrameMaker can create the basic conversion table for
you to use as a starting point.</shortdesc>
<prolog><author>Scott Prentice</author>
<critdates><created date = "2013-08-02"/>
<revised modified = "2013-08-04"/></critdates></prolog>
<body><p><indexterm>conversion table<indexterm>setup</indexterm></indexterm><indexterm>conversion
table<indexterm>codes</indexterm></indexterm>The first step in creating
a conversion table is to run the <menucascade><uicontrol>StructureTools</uicontrol>
<uicontrol>Generate Conversion Table</uicontrol></menucascade> command.
This creates an initial conversion table based on the styles and
objects in the current file. In order to ensure that the conversion
table supports all of the styles and objects in all files in a book,
you need to create a file that contains examples of all styles and
objects used in the book. The easy way to do this is to copy and
paste the content from each file into a single file. Once you’ve
got this merged file, run the Generate Conversion Table command,
and you’ll have a good starting point for your conversion table.</p>
<p>The conversion table generated by the Generate Conversion Table
command isn’t terribly useful as-is. You can apply it to a file
or the entire book, but it’ll just create a nonsense structure that
uses tag names that match your style and object names. The first
column in the conversion table specifies the styles and objects
being mapped, the second column is the element that each style or
object is mapped to, and a third column (empty by default) is for
an optional qualifier (discussed later). You add additional rows
to the table that define element wrapping rules that let you build
up the desired structure.</p>
<p>The table that’s created by this command will start with rows
for paragraph style mapping (identified by a “P:” prefix) then rows
for character styles (“C:”). After that will be rows that map other
objects like cross-references (“X:”), markers (“M:”), user variables (“UV:”),
and graphics (“G:”). All of these prefixes will be followed by the
associated style or object name, except for the “G:” which just
maps to all graphics. You’ll also see rows for tables and table
“parts.” Each table format will be identified with a “T:” prefix,
and then you’ll see codes with no descriptive text for each table
part: “TT:” (table title), “TH:” (table head), “TB:” (table body),
“TF:” (table footer, which isn’t valid in DITA), “TR:” (table row), and
“TC:” (table cell).</p>
<p>Before doing anything serious, you may want to do is to modify
the formatting and layout of the table. We suggest reducing the
font size and expanding the table width by reducing the margins,
then possibly adding another column for notes. This is all optional,
but you’ll be spending a lot of time in this table, so make it something
that’s easy remember.</p>
<p>A conversion table may be broken into multiple tables to make
it easier for you to organize the processing rules, as defined by
each row in the table. In general, there are two fundamental groups
of rules, mapping rules and wrapping rules. The mapping rules create
the base element from a style or object, and wrapping rules will
wrap existing elements in more elements.</p></body></topic>
